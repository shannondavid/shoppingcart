/*
 * TCSS 305
 * Assignment 2 - ShoppingCart
 */

package tests;

import static org.junit.Assert.assertEquals;

import java.math.BigDecimal;
import model.Item;
import model.ItemOrder;
import org.junit.Before;
import org.junit.Test;

/**
 * Class to run JUnit Test on Item Class.
 * 
 * @author davidshannon
 * @version 1
 */
public class ItemTest {
    
    // The test fixture. The Object I will use in the tests.
    
    /**
     * An Item object to use in the tests.
     */
    private Item myItem;
    
    /**
     * A method to initialize the test fixture before each test.
     */
    @Before
    public void setUp() {
        myItem = new Item("Item", new BigDecimal("10.00"));
    }

    /**
     * Test of the non-bulk Item constructor. 
     */
    @Test
    public void testNonBulkConstructor() {
        assertEquals("Item", myItem.getName());
        assertEquals(new BigDecimal("10.00"), myItem.getPrice());
        assertEquals(new BigDecimal("0.0"), myItem.getBulkPrice());
        assertEquals(0, myItem.getBulkQuantity());
        assertEquals(false, myItem.isBulk());
    }
    
    /**
     * Test of the bulk constructor.
     */
    @Test
    public void testBulkConstructor() {
        myItem = new Item("Item2", new BigDecimal("11.00"), 5, new BigDecimal("15.00"));
        assertEquals("Item2", myItem.getName());
        assertEquals(new BigDecimal("11.00"), myItem.getPrice());
        assertEquals(5, myItem.getBulkQuantity());
        assertEquals(new BigDecimal("15.00"), myItem.getBulkPrice());
        assertEquals(true, myItem.isBulk());
    }
    
    /**
     * Test of the simple constructor when myPrice is Null.
     */
   /* @Test(expected = NullPointerException.class)
    public void testPriceNull() {
        myItem = new Item("Item", null);
    }*/
    
    /**
     * Test of the bulk Constructor when BulkPrice is Null.
     */
    /*@Test(expected = NullPointerException.class)
    public void testBulkPriceNull() {
        myItem = new Item("Item", new BigDecimal("1.00"), 1, null);
    }*/
    
    /**
     * Test of the overridden toString() method when item is Bulk.
     */
    @Test
    public void testToStringBulk() {
        myItem = new Item("Item2", new BigDecimal("1.00"), 1, new BigDecimal("5.00"));
        assertEquals("Item2, $1.00 (1 for $5.00)", myItem.toString());
    }

    /**
     * Test of the overridden toString() method when item is not Bulk.
     */
    @Test
    public void testToStringNotBulk() {
        myItem = new Item("Item2", new BigDecimal("1.00"));
        assertEquals("Item2, $1.00", myItem.toString());
    }
    
    /**
     * Test of the equals method.
     */
    @Test
    public void testEqualsAndHash() {
        myItem = new Item("Item", new BigDecimal("1.00"));
        final Item newItem2 = new Item("Item", new BigDecimal("1.00"));
        assertEquals(true, myItem.equals(newItem2));
        assertEquals(myItem, newItem2);
        assertEquals(myItem.hashCode(), newItem2.hashCode());
    }
    
    /**
     * Test of the equals method when one object is null.
     */
    @Test
    public void testEqualsNull() {
        myItem = new Item("Item", new BigDecimal("1.00"));
        final Item newItem2 = new Item("Item", new BigDecimal("1.00"));
        assertEquals(myItem, newItem2);
    }
    
    /**
     * Test of the equals method when one object is null.
     */
   @Test
    public void testEqualsWrongClass() {
        myItem = new Item("Item", new BigDecimal("1.00"));
        final ItemOrder order = new ItemOrder(myItem, 1);
        assertEquals(false, myItem.equals(order));
    }
    
    /**
     * Test of the hashcode function.
     */


}
